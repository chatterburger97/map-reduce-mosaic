============================Indexer.py==================================
def main():
    
    if not os.path.exists(INDEX_PATH):
        os.makedirs(INDEX_PATH)
    files = glob.glob(DB_PATH + "/" + "*.jpg")
    
    entry = {}
    
    r = map(images_processing, files)
        

    with open(INDEX_PATH + "histogram.index", 'w') as outfile:
        json.dump(index, outfile, indent=4)
        
    print ("Index written to: " + INDEX_PATH + "histogram.index")

def images_processing(file):
	print "Processing file: " + file
        image = convertImage(file)
        entry = features.extractFeature(image)
        entry["file"] = ntpath.basename(file)
        color_store(entry)	

def color_store():
	
	index.append(entry)
	

===========================features.py==================================
def getAverageColor(image, index, bins):
    (h,w,_) = image.shape
    histogram = cv2.calcHist([image],[index], None, [bins],[0,bins])
    x = 0
    for i in range(0,len(histogram)):
        x += (int(histogram[i])*i)
    return x / (w*h)

def matchExcelColor(b,g,r)
//determine black, white, color
//Find cases of White/Black/Grey
if entry["s"] < 30
	//White case v>80
	if entry["v"] > 80
	//Grey 20>V>80
	if entry["v"] >=20 && entry["s"]<=80
	//Black v<20
	else
		....
else:
	if (v<20)
	-->Black
	else
		//Have color, S>30
		//Use H value to determine color 
		//case/60


def extractFeature(image):
    entry = {}
     image = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
    entry["h"] = getAverageColor(image, 0, 180)
    entry["s"] = getAverageColor(image, 1, 256)
    entry["v"] = getAverageColor(image, 2, 256)
    matchExcelColor(entry["h"], entry["s"], entry["v"])
    
    
    return entry